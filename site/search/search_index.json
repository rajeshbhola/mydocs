{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome</p>"},{"location":"java/","title":"Java","text":"<p>welcome to java</p>"},{"location":"java/basics/","title":"Java Basics","text":"<p>Welcome to Java Basics! This section covers fundamental concepts of Java programming.</p>"},{"location":"java/basics/#what-youll-learn","title":"What You'll Learn","text":"<p>This section introduces you to the core concepts of Java programming language:</p> <ul> <li>Understanding Java keywords and their usage</li> <li>Learning about identifiers and naming conventions</li> <li>Java syntax fundamentals</li> <li>Basic program structure</li> </ul>"},{"location":"java/basics/#topics-covered","title":"Topics Covered","text":""},{"location":"java/basics/#1-keywords","title":"1. Keywords","text":"<p>Learn about reserved words in Java that have special meanings and cannot be used as identifiers.</p> <p>Key Concepts: - What are keywords? - List of all Java keywords - Usage and examples - Common mistakes to avoid</p>"},{"location":"java/basics/#2-identifiers","title":"2. Identifiers","text":"<p>Understand how to name variables, methods, classes, and other program elements.</p> <p>Key Concepts: - Rules for creating identifiers - Naming conventions - Valid and invalid identifiers - Best practices</p>"},{"location":"java/basics/#getting-started","title":"Getting Started","text":"<p>Prerequisites</p> <p>Before diving into Java basics, ensure you have: - JDK (Java Development Kit) installed - A text editor or IDE (IntelliJ IDEA, Eclipse, VS Code) - Basic understanding of programming concepts</p>"},{"location":"java/basics/#your-first-java-program","title":"Your First Java Program","text":"<p>Here's a simple \"Hello World\" program to get you started:</p> Java<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>"},{"location":"java/basics/#breaking-down-the-code","title":"Breaking Down the Code:","text":"<ul> <li><code>public class HelloWorld</code> - Declares a public class named HelloWorld</li> <li><code>public static void main(String[] args)</code> - The main method, entry point of the program</li> <li><code>System.out.println()</code> - Prints text to console</li> </ul>"},{"location":"java/basics/#why-learn-java-basics","title":"Why Learn Java Basics?","text":"<p>Understanding the basics is crucial because:</p> <ol> <li>Foundation for Advanced Topics - Everything in Java builds on these fundamentals</li> <li>Code Quality - Proper naming and keyword usage leads to better code</li> <li>Industry Standards - Following conventions makes your code professional</li> <li>Debugging - Understanding basics helps identify and fix errors quickly</li> </ol>"},{"location":"java/basics/#learning-path","title":"Learning Path","text":"<pre><code>graph LR\n    A[Java Basics] --&gt; B[Keywords]\n    A --&gt; C[Identifiers]\n    B --&gt; D[Data Types]\n    C --&gt; D\n    D --&gt; E[OOPs Concepts]</code></pre>"},{"location":"java/basics/#quick-reference","title":"Quick Reference","text":"Topic Description Keywords 50+ reserved words in Java Identifiers Names for variables, classes, methods Data Types Types of data that can be stored Operators Symbols for performing operations"},{"location":"java/basics/#practice-tips","title":"Practice Tips","text":"<p>Hands-On Learning</p> <p>The best way to learn Java basics is by writing code: - Write small programs using different keywords - Practice naming variables following conventions - Experiment with different data types - Make mistakes and learn from them</p>"},{"location":"java/basics/#common-beginner-mistakes","title":"Common Beginner Mistakes","text":"<ol> <li> <p>Using keywords as identifiers Java<pre><code>int class = 5;  // \u274c Wrong\nint className = 5; // \u2705 Correct\n</code></pre></p> </li> <li> <p>Incorrect naming conventions Java<pre><code>public class student { }  // \u274c Wrong\npublic class Student { }  // \u2705 Correct\n</code></pre></p> </li> <li> <p>Missing semicolons Java<pre><code>System.out.println(\"Hello\")  // \u274c Wrong\nSystem.out.println(\"Hello\"); // \u2705 Correct\n</code></pre></p> </li> </ol>"},{"location":"java/basics/#next-steps","title":"Next Steps","text":"<p>After completing Java Basics, you'll be ready to explore:</p> <ul> <li>Object-Oriented Programming (OOPs) concepts</li> <li>Exception Handling</li> <li>Collections Framework</li> <li>Advanced Java features</li> </ul> <p>Start your journey by learning about Java Keywords!</p>"},{"location":"java/basics/identifiers/","title":"Java Identifiers","text":"<p>Identifiers are names given to various program elements like variables, methods, classes, interfaces, packages, etc.</p>"},{"location":"java/basics/identifiers/#what-are-identifiers","title":"What are Identifiers?","text":"<p>An identifier is a name given to a program element such as: - Variables - Methods - Classes - Interfaces - Packages - Constants</p>"},{"location":"java/basics/identifiers/#rules-for-identifiers","title":"Rules for Identifiers","text":""},{"location":"java/basics/identifiers/#must-follow-these-rules","title":"Must Follow These Rules:","text":"<ol> <li>Can contain:</li> <li>Letters (a-z, A-Z)</li> <li>Digits (0-9)</li> <li>Underscore (_)</li> <li> <p>Dollar sign ($)</p> </li> <li> <p>Must begin with:</p> </li> <li>A letter (a-z, A-Z)</li> <li>Underscore (_)</li> <li>Dollar sign ($)</li> <li> <p>Cannot start with a digit</p> </li> <li> <p>Cannot be:</p> </li> <li>Java keywords</li> <li> <p><code>true</code>, <code>false</code>, or <code>null</code></p> </li> <li> <p>Case sensitive:</p> </li> <li> <p><code>myVariable</code> and <code>myvariable</code> are different</p> </li> <li> <p>No length limit:</p> </li> <li>Can be any length, but keep them reasonable</li> </ol>"},{"location":"java/basics/identifiers/#valid-and-invalid-identifiers","title":"Valid and Invalid Identifiers","text":""},{"location":"java/basics/identifiers/#valid-identifiers","title":"Valid Identifiers \u2705","text":"Java<pre><code>// Valid variable names\nint age;\nint _age;\nint $age;\nint age1;\nint myAge;\nint my_age;\nint $my_age_123;\n\n// Valid class names\nclass Student { }\nclass _Student { }\nclass $Student { }\nclass Student123 { }\n</code></pre>"},{"location":"java/basics/identifiers/#invalid-identifiers","title":"Invalid Identifiers \u274c","text":"Java<pre><code>// Invalid - starts with digit\nint 1age;        // \u274c Error\n\n// Invalid - contains special characters\nint my-age;      // \u274c Error\nint my age;      // \u274c Error (space not allowed)\nint my@age;      // \u274c Error\n\n// Invalid - Java keyword\nint class;       // \u274c Error\nint public;      // \u274c Error\nint static;      // \u274c Error\n\n// Invalid - reserved literals\nint true;        // \u274c Error\nint false;       // \u274c Error\nint null;        // \u274c Error\n</code></pre>"},{"location":"java/basics/identifiers/#naming-conventions","title":"Naming Conventions","text":"<p>Java follows specific naming conventions to make code more readable:</p>"},{"location":"java/basics/identifiers/#1-class-names","title":"1. Class Names","text":"<ul> <li>Start with uppercase letter</li> <li>Use PascalCase (capitalize first letter of each word)</li> </ul> Java<pre><code>public class Student { }\npublic class StudentRecord { }\npublic class EmployeeManagementSystem { }\n</code></pre>"},{"location":"java/basics/identifiers/#2-interface-names","title":"2. Interface Names","text":"<ul> <li>Same as class names</li> <li>Start with uppercase letter</li> <li>Use PascalCase</li> </ul> Java<pre><code>public interface Drawable { }\npublic interface ActionListener { }\npublic interface Comparable { }\n</code></pre>"},{"location":"java/basics/identifiers/#3-method-names","title":"3. Method Names","text":"<ul> <li>Start with lowercase letter</li> <li>Use camelCase</li> <li>Should be verbs or verb phrases</li> </ul> Java<pre><code>public void calculateTotal() { }\npublic int getAge() { }\npublic void setName(String name) { }\npublic boolean isActive() { }\n</code></pre>"},{"location":"java/basics/identifiers/#4-variable-names","title":"4. Variable Names","text":"<ul> <li>Start with lowercase letter</li> <li>Use camelCase</li> <li>Should be meaningful and descriptive</li> </ul> Java<pre><code>int age;\nString firstName;\ndouble accountBalance;\nboolean isActive;\n</code></pre>"},{"location":"java/basics/identifiers/#5-constant-names","title":"5. Constant Names","text":"<ul> <li>All UPPERCASE letters</li> <li>Words separated by underscores</li> <li>Declared with <code>final</code> keyword</li> </ul> Java<pre><code>public static final int MAX_VALUE = 100;\npublic static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/db\";\npublic static final double PI = 3.14159;\n</code></pre>"},{"location":"java/basics/identifiers/#6-package-names","title":"6. Package Names","text":"<ul> <li>All lowercase letters</li> <li>Reverse domain name notation</li> </ul> Java<pre><code>package com.company.project;\npackage org.example.utilities;\npackage in.mycompany.module;\n</code></pre>"},{"location":"java/basics/identifiers/#examples","title":"Examples","text":""},{"location":"java/basics/identifiers/#complete-example-with-proper-naming","title":"Complete Example with Proper Naming","text":"Java<pre><code>package com.example.school;\n\npublic class StudentManagement {\n    // Constants\n    public static final int MAX_STUDENTS = 100;\n    public static final String SCHOOL_NAME = \"ABC School\";\n\n    // Instance variables\n    private String studentName;\n    private int studentAge;\n    private double studentGrade;\n    private boolean isActive;\n\n    // Constructor\n    public StudentManagement(String studentName, int studentAge) {\n        this.studentName = studentName;\n        this.studentAge = studentAge;\n        this.isActive = true;\n    }\n\n    // Getter methods\n    public String getStudentName() {\n        return studentName;\n    }\n\n    public int getStudentAge() {\n        return studentAge;\n    }\n\n    // Setter methods\n    public void setStudentGrade(double grade) {\n        this.studentGrade = grade;\n    }\n\n    // Regular methods\n    public void displayStudentInfo() {\n        System.out.println(\"Name: \" + studentName);\n        System.out.println(\"Age: \" + studentAge);\n        System.out.println(\"Grade: \" + studentGrade);\n    }\n\n    public boolean checkEligibility() {\n        return isActive &amp;&amp; studentAge &gt;= 5;\n    }\n}\n</code></pre>"},{"location":"java/basics/identifiers/#best-practices","title":"Best Practices","text":"<p>Use Meaningful Names</p> <p>Choose names that clearly describe the purpose: Java<pre><code>// Bad\nint a, b, c;\n\n// Good\nint studentAge, studentGrade, studentRollNumber;\n</code></pre></p> <p>Be Consistent</p> <p>Follow the same naming convention throughout your project.</p> <p>Avoid Single Letters</p> <p>Except for loop counters (i, j, k), use descriptive names: Java<pre><code>// Acceptable for loops\nfor (int i = 0; i &lt; 10; i++) { }\n\n// Not recommended for variables\nint a = 25;  // Bad\nint age = 25; // Good\n</code></pre></p> <p>Don't Use Dollar Sign</p> <p>While <code>$</code> is allowed, it's typically reserved for generated code: Java<pre><code>int $value;  // Legal but not recommended\nint value;   // Better\n</code></pre></p>"},{"location":"java/basics/identifiers/#common-mistakes","title":"Common Mistakes","text":""},{"location":"java/basics/identifiers/#1-starting-with-a-number","title":"1. Starting with a Number","text":"Java<pre><code>int 1stPlace;    // \u274c Error\nint firstPlace;  // \u2705 Correct\n</code></pre>"},{"location":"java/basics/identifiers/#2-using-keywords","title":"2. Using Keywords","text":"Java<pre><code>int class;       // \u274c Error\nint className;   // \u2705 Correct\n</code></pre>"},{"location":"java/basics/identifiers/#3-using-spaces","title":"3. Using Spaces","text":"Java<pre><code>int my age;      // \u274c Error\nint myAge;       // \u2705 Correct\nint my_age;      // \u2705 Also correct\n</code></pre>"},{"location":"java/basics/identifiers/#4-wrong-case-in-naming-conventions","title":"4. Wrong Case in Naming Conventions","text":"Java<pre><code>public class student { }     // \u274c Should start with uppercase\npublic class Student { }     // \u2705 Correct\n\nint StudentAge;              // \u274c Variable should start with lowercase\nint studentAge;              // \u2705 Correct\n</code></pre>"},{"location":"java/basics/identifiers/#summary","title":"Summary","text":"Element Convention Example Class PascalCase <code>StudentRecord</code> Interface PascalCase <code>Drawable</code> Method camelCase <code>calculateTotal()</code> Variable camelCase <code>studentName</code> Constant UPPER_SNAKE_CASE <code>MAX_VALUE</code> Package lowercase <code>com.example.project</code>"},{"location":"java/basics/identifiers/#next-steps","title":"Next Steps","text":"<p>Now that you understand identifiers, continue learning about Java data types and how to use them effectively in your programs.</p>"},{"location":"java/basics/keywords/","title":"Java Keywords","text":"<p>Keywords are reserved words in Java that have predefined meanings and cannot be used as identifiers.</p>"},{"location":"java/basics/keywords/#what-are-keywords","title":"What are Keywords?","text":"<p>Keywords are special words in Java programming language that are reserved by Java for specific purposes. These words cannot be used as variable names, method names, class names, or any other identifiers.</p>"},{"location":"java/basics/keywords/#list-of-java-keywords","title":"List of Java Keywords","text":"<p>Java has 50+ keywords that serve different purposes:</p>"},{"location":"java/basics/keywords/#access-modifiers","title":"Access Modifiers","text":"Keyword Description <code>public</code> Accessible from anywhere <code>private</code> Accessible only within the class <code>protected</code> Accessible within package and subclasses"},{"location":"java/basics/keywords/#data-types","title":"Data Types","text":"Keyword Description <code>byte</code> 8-bit integer <code>short</code> 16-bit integer <code>int</code> 32-bit integer <code>long</code> 64-bit integer <code>float</code> 32-bit floating point <code>double</code> 64-bit floating point <code>char</code> 16-bit Unicode character <code>boolean</code> true or false"},{"location":"java/basics/keywords/#control-flow-keywords","title":"Control Flow Keywords","text":"Java<pre><code>// if-else statement\nif (condition) {\n    // code\n} else if (anotherCondition) {\n    // code\n} else {\n    // code\n}\n\n// switch statement\nswitch (variable) {\n    case value1:\n        // code\n        break;\n    case value2:\n        // code\n        break;\n    default:\n        // code\n}\n\n// loops\nfor (int i = 0; i &lt; 10; i++) {\n    // code\n}\n\nwhile (condition) {\n    // code\n}\n\ndo {\n    // code\n} while (condition);\n</code></pre>"},{"location":"java/basics/keywords/#class-and-object-keywords","title":"Class and Object Keywords","text":"Keyword Description <code>class</code> Declares a class <code>interface</code> Declares an interface <code>extends</code> Indicates inheritance <code>implements</code> Implements an interface <code>new</code> Creates new objects <code>this</code> Refers to current object <code>super</code> Refers to parent class"},{"location":"java/basics/keywords/#exception-handling-keywords","title":"Exception Handling Keywords","text":"Java<pre><code>try {\n    // code that may throw exception\n} catch (ExceptionType e) {\n    // handle exception\n} finally {\n    // always executed\n}\n\nthrow new Exception(\"Error message\");\nthrows ExceptionType\n</code></pre>"},{"location":"java/basics/keywords/#other-important-keywords","title":"Other Important Keywords","text":"Keyword Description <code>static</code> Belongs to class, not instance <code>final</code> Cannot be changed/overridden <code>abstract</code> Must be implemented by subclass <code>synchronized</code> Thread-safe access <code>volatile</code> Value may change unexpectedly <code>transient</code> Not serialized <code>native</code> Implemented in native code <code>void</code> No return value <code>return</code> Returns from method <code>package</code> Declares package <code>import</code> Imports classes"},{"location":"java/basics/keywords/#examples","title":"Examples","text":""},{"location":"java/basics/keywords/#using-keywords-in-a-class","title":"Using Keywords in a Class","text":"Java<pre><code>public class Student {\n    // Instance variables\n    private String name;\n    private int age;\n\n    // Constructor\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Static variable\n    public static int totalStudents = 0;\n\n    // Final constant\n    public static final String SCHOOL_NAME = \"XYZ School\";\n\n    // Method\n    public void displayInfo() {\n        System.out.println(\"Name: \" + this.name);\n        System.out.println(\"Age: \" + this.age);\n    }\n}\n</code></pre>"},{"location":"java/basics/keywords/#best-practices","title":"Best Practices","text":"<p>Naming Convention</p> <p>Since keywords are reserved, always use meaningful names for identifiers that don't conflict with keywords.</p> <p>Case Sensitive</p> <p>Java keywords are case-sensitive. For example, <code>public</code> is a keyword, but <code>Public</code> or <code>PUBLIC</code> are not.</p>"},{"location":"java/basics/keywords/#common-mistakes","title":"Common Mistakes","text":"<ol> <li> <p>Using keywords as identifiers Java<pre><code>int class = 5;  // \u274c Error: keyword 'class' cannot be used\nint myClass = 5; // \u2705 Correct\n</code></pre></p> </li> <li> <p>Incorrect capitalization Java<pre><code>Public class Test { }  // \u274c Error: 'Public' is not recognized\npublic class Test { }  // \u2705 Correct\n</code></pre></p> </li> </ol>"},{"location":"java/basics/keywords/#summary","title":"Summary","text":"<ul> <li>Keywords are reserved words with special meanings</li> <li>There are 50+ keywords in Java</li> <li>Keywords are case-sensitive</li> <li>Cannot be used as identifiers</li> <li>Essential for Java syntax and structure</li> </ul>"},{"location":"java/basics/keywords/#next-steps","title":"Next Steps","text":"<p>Continue learning about Java Identifiers to understand how to name your variables, methods, and classes properly.</p>"},{"location":"java/exception-handling/","title":"Exception Handling","text":"<p>Learn how to handle errors and exceptions gracefully in Java applications.</p>"},{"location":"java/exception-handling/#what-is-an-exception","title":"What is an Exception?","text":"<p>An exception is an unwanted or unexpected event that occurs during the execution of a program and disrupts its normal flow.</p>"},{"location":"java/exception-handling/#exception-hierarchy","title":"Exception Hierarchy","text":""},{"location":"java/exception-handling/#using-mermaid-diagram","title":"Using Mermaid Diagram","text":"<pre><code>graph TD\n    A[Object] --&gt; B[Throwable]\n    B --&gt; C[Exception]\n    B --&gt; D[Error]\n    C --&gt; E[IOException]\n    C --&gt; F[SQLException]\n    C --&gt; G[RuntimeException]\n    G --&gt; H[NullPointerException]\n    G --&gt; I[ArrayIndexOutOfBoundsException]\n    G --&gt; J[ArithmeticException]</code></pre>"},{"location":"java/exception-handling/#using-plantuml-diagram","title":"Using PlantUML Diagram","text":""},{"location":"java/exception-handling/#types-of-exceptions","title":"Types of Exceptions","text":""},{"location":"java/exception-handling/#1-checked-exceptions","title":"1. Checked Exceptions","text":"<p>Checked at compile-time. Must be handled or declared.</p> Java<pre><code>// Checked Exception Example\npublic void readFile(String fileName) throws IOException {\n    FileReader file = new FileReader(fileName);\n    BufferedReader reader = new BufferedReader(file);\n    // Read file\n}\n</code></pre>"},{"location":"java/exception-handling/#2-unchecked-exceptions-runtime-exceptions","title":"2. Unchecked Exceptions (Runtime Exceptions)","text":"<p>Not checked at compile-time.</p> Java<pre><code>// Unchecked Exception Example\npublic int divide(int a, int b) {\n    return a / b;  // May throw ArithmeticException\n}\n\nint result = divide(10, 0);  // Throws ArithmeticException at runtime\n</code></pre>"},{"location":"java/exception-handling/#3-errors","title":"3. Errors","text":"<p>Serious problems that applications shouldn't try to catch.</p> Java<pre><code>// Error Example (don't catch these)\nOutOfMemoryError\nStackOverflowError\n</code></pre>"},{"location":"java/exception-handling/#exception-handling-keywords","title":"Exception Handling Keywords","text":""},{"location":"java/exception-handling/#try-catch-block","title":"try-catch Block","text":"Java<pre><code>try {\n    // Code that may throw exception\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    // Handle exception\n    System.out.println(\"Cannot divide by zero: \" + e.getMessage());\n}\n</code></pre>"},{"location":"java/exception-handling/#multiple-catch-blocks","title":"Multiple catch Blocks","text":"Java<pre><code>try {\n    int[] arr = new int[5];\n    arr[10] = 50;  // ArrayIndexOutOfBoundsException\n    int result = 10 / 0;  // ArithmeticException\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Array index error: \" + e.getMessage());\n} catch (ArithmeticException e) {\n    System.out.println(\"Math error: \" + e.getMessage());\n} catch (Exception e) {\n    System.out.println(\"General error: \" + e.getMessage());\n}\n</code></pre>"},{"location":"java/exception-handling/#try-catch-finally","title":"try-catch-finally","text":"Java<pre><code>FileReader file = null;\ntry {\n    file = new FileReader(\"data.txt\");\n    // Read file\n} catch (IOException e) {\n    System.out.println(\"Error reading file: \" + e.getMessage());\n} finally {\n    // Always executed - clean up resources\n    if (file != null) {\n        try {\n            file.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#try-with-resources-java-7","title":"try-with-resources (Java 7+)","text":"<p>Automatically closes resources.</p> Java<pre><code>// Automatic resource management\ntry (FileReader file = new FileReader(\"data.txt\");\n     BufferedReader reader = new BufferedReader(file)) {\n\n    String line = reader.readLine();\n    System.out.println(line);\n\n} catch (IOException e) {\n    System.out.println(\"Error: \" + e.getMessage());\n}\n// No finally needed - resources auto-closed\n</code></pre>"},{"location":"java/exception-handling/#throwing-exceptions","title":"Throwing Exceptions","text":""},{"location":"java/exception-handling/#throw-keyword","title":"throw Keyword","text":"Java<pre><code>public void checkAge(int age) {\n    if (age &lt; 18) {\n        throw new IllegalArgumentException(\"Age must be 18 or above\");\n    }\n    System.out.println(\"Access granted\");\n}\n</code></pre>"},{"location":"java/exception-handling/#throws-keyword","title":"throws Keyword","text":"Java<pre><code>public void readFile(String fileName) throws IOException {\n    FileReader file = new FileReader(fileName);\n    // Method declares it may throw IOException\n}\n\n// Caller must handle it\npublic void processFile() {\n    try {\n        readFile(\"data.txt\");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>Create your own exception classes:</p> Java<pre><code>// Custom checked exception\npublic class InsufficientFundsException extends Exception {\n    private double amount;\n\n    public InsufficientFundsException(double amount) {\n        super(\"Insufficient funds: \" + amount);\n        this.amount = amount;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n}\n\n// Usage\npublic class BankAccount {\n    private double balance;\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount &gt; balance) {\n            throw new InsufficientFundsException(amount - balance);\n        }\n        balance -= amount;\n    }\n}\n\n// Using the custom exception\npublic class Main {\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount();\n        try {\n            account.withdraw(500);\n        } catch (InsufficientFundsException e) {\n            System.out.println(e.getMessage());\n            System.out.println(\"Short by: $\" + e.getAmount());\n        }\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#common-exceptions","title":"Common Exceptions","text":"Exception Description Example <code>NullPointerException</code> Accessing null object <code>String s = null; s.length();</code> <code>ArrayIndexOutOfBoundsException</code> Invalid array index <code>int[] arr = new int[5]; arr[10] = 1;</code> <code>ArithmeticException</code> Math errors <code>int x = 10 / 0;</code> <code>NumberFormatException</code> Invalid number conversion <code>Integer.parseInt(\"abc\");</code> <code>IOException</code> I/O operation failed File operations <code>SQLException</code> Database error Database operations <code>ClassNotFoundException</code> Class not found <code>Class.forName(\"NonExistent\");</code>"},{"location":"java/exception-handling/#best-practices","title":"Best Practices","text":"<p>Exception Handling Best Practices</p> <ol> <li>Catch specific exceptions - Don't catch generic Exception</li> <li>Don't catch Throwable - Too broad</li> <li>Use finally or try-with-resources - Clean up resources</li> <li>Don't ignore exceptions - Always handle or log</li> <li>Create meaningful custom exceptions - Make debugging easier</li> <li>Don't use exceptions for flow control - Use conditionals instead</li> </ol>"},{"location":"java/exception-handling/#good-practice","title":"Good Practice \u2705","text":"Java<pre><code>public void processData(String data) {\n    try {\n        // Process data\n        int value = Integer.parseInt(data);\n        // More processing\n    } catch (NumberFormatException e) {\n        logger.error(\"Invalid number format: \" + data, e);\n        throw new DataProcessingException(\"Invalid data format\", e);\n    } finally {\n        // Clean up\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#bad-practice","title":"Bad Practice \u274c","text":"Java<pre><code>// Don't do this!\ntry {\n    // Some code\n} catch (Exception e) {\n    // Empty catch block - swallows exception\n}\n\n// Or this\ntry {\n    // Some code\n} catch (Throwable t) {\n    // Too broad - catches errors too\n}\n\n// Or this\npublic void process() throws Exception {\n    // Too generic\n}\n</code></pre>"},{"location":"java/exception-handling/#exception-propagation","title":"Exception Propagation","text":"Java<pre><code>public class ExceptionPropagation {\n    // Exception occurs here\n    public void method1() {\n        int result = 10 / 0;  // ArithmeticException\n    }\n\n    // Exception propagates to method2\n    public void method2() {\n        method1();  // Exception not handled here\n    }\n\n    // Exception propagates to method3\n    public void method3() {\n        method2();  // Exception not handled here\n    }\n\n    // Finally caught here\n    public void method4() {\n        try {\n            method3();\n        } catch (ArithmeticException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#exception-flow-diagram","title":"Exception Flow Diagram","text":""},{"location":"java/exception-handling/#chained-exceptions","title":"Chained Exceptions","text":"Java<pre><code>try {\n    // Some operation\n    throw new IOException(\"Database connection failed\");\n} catch (IOException e) {\n    // Wrap and rethrow with more context\n    throw new RuntimeException(\"Failed to process request\", e);\n}\n\n// Accessing the chain\ncatch (RuntimeException e) {\n    System.out.println(\"Main cause: \" + e.getCause());\n    e.printStackTrace();\n}\n</code></pre>"},{"location":"java/exception-handling/#real-world-example","title":"Real-World Example","text":"Java<pre><code>public class UserService {\n    private Database database;\n    private Logger logger;\n\n    public User getUserById(int userId) {\n        try {\n            // Validate input\n            if (userId &lt;= 0) {\n                throw new IllegalArgumentException(\"Invalid user ID: \" + userId);\n            }\n\n            // Connect to database\n            Connection conn = database.getConnection();\n\n            try (PreparedStatement stmt = conn.prepareStatement(\n                    \"SELECT * FROM users WHERE id = ?\")) {\n\n                stmt.setInt(1, userId);\n                ResultSet rs = stmt.executeQuery();\n\n                if (rs.next()) {\n                    return new User(\n                        rs.getInt(\"id\"),\n                        rs.getString(\"name\"),\n                        rs.getString(\"email\")\n                    );\n                } else {\n                    throw new UserNotFoundException(\"User not found: \" + userId);\n                }\n\n            } catch (SQLException e) {\n                logger.error(\"Database error while fetching user: \" + userId, e);\n                throw new DataAccessException(\"Failed to fetch user\", e);\n            }\n\n        } catch (IllegalArgumentException e) {\n            logger.warn(\"Invalid request: \" + e.getMessage());\n            throw e;\n        } catch (DataAccessException e) {\n            logger.error(\"Data access failed\", e);\n            throw new ServiceException(\"Unable to retrieve user\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"java/exception-handling/#summary","title":"Summary","text":"Concept Description Exception Event that disrupts normal program flow try-catch Handle exceptions finally Always executed, for cleanup throw Manually throw an exception throws Declare exceptions a method may throw Custom Exceptions Create application-specific exceptions"},{"location":"java/exception-handling/#key-points","title":"Key Points","text":"<ul> <li>\u2705 Always handle or declare checked exceptions</li> <li>\u2705 Use specific exception types</li> <li>\u2705 Clean up resources in finally or try-with-resources</li> <li>\u2705 Log exceptions with meaningful messages</li> <li>\u2705 Create custom exceptions for business logic errors</li> <li>\u274c Don't catch generic Exception or Throwable</li> <li>\u274c Don't ignore exceptions (empty catch blocks)</li> <li>\u274c Don't use exceptions for normal flow control</li> </ul>"},{"location":"java/exception-handling/#next-steps","title":"Next Steps","text":"<p>Learn more about: - Java Collections Framework - Multithreading and Concurrency - File I/O operations - JDBC and database operations</p>"},{"location":"java/oops/","title":"Object-Oriented Programming (OOPs)","text":"<p>Learn the fundamental concepts of Object-Oriented Programming in Java.</p>"},{"location":"java/oops/#what-is-oop","title":"What is OOP?","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that organizes code around objects rather than functions and logic. Java is a fully object-oriented programming language.</p>"},{"location":"java/oops/#core-oop-concepts","title":"Core OOP Concepts","text":""},{"location":"java/oops/#1-class-and-object","title":"1. Class and Object","text":"<p>Class - A blueprint or template for creating objects.</p> <p>Object - An instance of a class.</p> Java<pre><code>// Class definition\npublic class Car {\n    // Properties (attributes)\n    String brand;\n    String model;\n    int year;\n\n    // Method (behavior)\n    public void start() {\n        System.out.println(\"Car is starting...\");\n    }\n}\n\n// Creating objects\nCar myCar = new Car();\nmyCar.brand = \"Toyota\";\nmyCar.model = \"Camry\";\nmyCar.year = 2023;\nmyCar.start();\n</code></pre>"},{"location":"java/oops/#2-encapsulation","title":"2. Encapsulation","text":"<p>Encapsulation is the bundling of data and methods that operate on that data within a single unit (class), and restricting direct access to some components.</p> Java<pre><code>public class BankAccount {\n    // Private variables (data hiding)\n    private String accountNumber;\n    private double balance;\n\n    // Public methods to access private data\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        if (amount &gt; 0) {\n            balance += amount;\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount &gt; 0 &amp;&amp; amount &lt;= balance) {\n            balance -= amount;\n        }\n    }\n}\n</code></pre> <p>Benefits: - Data hiding and security - Flexibility and maintainability - Control over data</p>"},{"location":"java/oops/#3-inheritance","title":"3. Inheritance","text":"<p>Inheritance allows a class to inherit properties and methods from another class.</p> Java<pre><code>// Parent class (Superclass)\npublic class Animal {\n    protected String name;\n\n    public void eat() {\n        System.out.println(\"This animal eats food\");\n    }\n\n    public void sleep() {\n        System.out.println(\"This animal sleeps\");\n    }\n}\n\n// Child class (Subclass)\npublic class Dog extends Animal {\n    public void bark() {\n        System.out.println(\"The dog barks\");\n    }\n\n    @Override\n    public void eat() {\n        System.out.println(\"The dog eats dog food\");\n    }\n}\n\n// Usage\nDog myDog = new Dog();\nmyDog.name = \"Buddy\";\nmyDog.eat();    // Overridden method\nmyDog.sleep();  // Inherited method\nmyDog.bark();   // Own method\n</code></pre> <p>Types of Inheritance in Java: - Single Inheritance - Multilevel Inheritance - Hierarchical Inheritance - Note: Java doesn't support multiple inheritance with classes (but supports with interfaces)</p>"},{"location":"java/oops/#4-polymorphism","title":"4. Polymorphism","text":"<p>Polymorphism means \"many forms\" - the ability of an object to take many forms.</p> <p>Types:</p>"},{"location":"java/oops/#a-compile-time-polymorphism-method-overloading","title":"a) Compile-time Polymorphism (Method Overloading)","text":"Java<pre><code>public class Calculator {\n    // Method overloading - same name, different parameters\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public int add(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n</code></pre>"},{"location":"java/oops/#b-runtime-polymorphism-method-overriding","title":"b) Runtime Polymorphism (Method Overriding)","text":"Java<pre><code>public class Shape {\n    public void draw() {\n        System.out.println(\"Drawing a shape\");\n    }\n}\n\npublic class Circle extends Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a circle\");\n    }\n}\n\npublic class Rectangle extends Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a rectangle\");\n    }\n}\n\n// Usage\nShape shape1 = new Circle();\nShape shape2 = new Rectangle();\n\nshape1.draw();  // Output: Drawing a circle\nshape2.draw();  // Output: Drawing a rectangle\n</code></pre>"},{"location":"java/oops/#5-abstraction","title":"5. Abstraction","text":"<p>Abstraction hides complex implementation details and shows only essential features.</p>"},{"location":"java/oops/#using-abstract-classes","title":"Using Abstract Classes","text":"Java<pre><code>public abstract class Vehicle {\n    // Abstract method (no implementation)\n    public abstract void start();\n\n    // Concrete method\n    public void stop() {\n        System.out.println(\"Vehicle stopped\");\n    }\n}\n\npublic class Car extends Vehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Car starts with key\");\n    }\n}\n\npublic class Bike extends Vehicle {\n    @Override\n    public void start() {\n        System.out.println(\"Bike starts with kick\");\n    }\n}\n</code></pre>"},{"location":"java/oops/#using-interfaces","title":"Using Interfaces","text":"Java<pre><code>public interface Drawable {\n    void draw();  // Abstract by default\n}\n\npublic interface Colorable {\n    void setColor(String color);\n}\n\n// Implementing multiple interfaces\npublic class Circle implements Drawable, Colorable {\n    private String color;\n\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n\n    @Override\n    public void setColor(String color) {\n        this.color = color;\n    }\n}\n</code></pre>"},{"location":"java/oops/#the-four-pillars-of-oop","title":"The Four Pillars of OOP","text":"<pre><code>graph TD\n    A[OOP Principles] --&gt; B[Encapsulation]\n    A --&gt; C[Inheritance]\n    A --&gt; D[Polymorphism]\n    A --&gt; E[Abstraction]\n\n    B --&gt; F[Data Hiding]\n    B --&gt; G[Access Control]\n\n    C --&gt; H[Code Reusability]\n    C --&gt; I[IS-A Relationship]\n\n    D --&gt; J[Method Overloading]\n    D --&gt; K[Method Overriding]\n\n    E --&gt; L[Abstract Classes]\n    E --&gt; M[Interfaces]</code></pre>"},{"location":"java/oops/#real-world-example","title":"Real-World Example","text":"Java<pre><code>// Complete OOP example\npublic abstract class Employee {\n    private String name;\n    private int id;\n    private double baseSalary;\n\n    public Employee(String name, int id, double baseSalary) {\n        this.name = name;\n        this.id = id;\n        this.baseSalary = baseSalary;\n    }\n\n    // Encapsulation - getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public double getBaseSalary() {\n        return baseSalary;\n    }\n\n    // Abstraction - abstract method\n    public abstract double calculateSalary();\n\n    // Common method\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"ID: \" + id);\n        System.out.println(\"Salary: \" + calculateSalary());\n    }\n}\n\n// Inheritance\npublic class FullTimeEmployee extends Employee {\n    private double bonus;\n\n    public FullTimeEmployee(String name, int id, double baseSalary, double bonus) {\n        super(name, id, baseSalary);\n        this.bonus = bonus;\n    }\n\n    @Override\n    public double calculateSalary() {\n        return getBaseSalary() + bonus;\n    }\n}\n\n// Inheritance\npublic class PartTimeEmployee extends Employee {\n    private int hoursWorked;\n    private double hourlyRate;\n\n    public PartTimeEmployee(String name, int id, int hours, double rate) {\n        super(name, id, 0);\n        this.hoursWorked = hours;\n        this.hourlyRate = rate;\n    }\n\n    @Override\n    public double calculateSalary() {\n        return hoursWorked * hourlyRate;\n    }\n}\n\n// Polymorphism in action\npublic class Main {\n    public static void main(String[] args) {\n        Employee emp1 = new FullTimeEmployee(\"John\", 101, 50000, 5000);\n        Employee emp2 = new PartTimeEmployee(\"Jane\", 102, 160, 25);\n\n        emp1.displayInfo();\n        emp2.displayInfo();\n    }\n}\n</code></pre>"},{"location":"java/oops/#benefits-of-oop","title":"Benefits of OOP","text":"Benefit Description Modularity Code is organized in self-contained objects Reusability Inheritance allows code reuse Flexibility Polymorphism allows objects to behave differently Maintainability Encapsulation makes code easier to maintain Security Data hiding protects sensitive information"},{"location":"java/oops/#best-practices","title":"Best Practices","text":"<p>Design Principles</p> <ul> <li>SOLID Principles - Follow SOLID principles for better design</li> <li>Composition over Inheritance - Prefer composition when possible</li> <li>Interface Segregation - Keep interfaces focused and small</li> <li>DRY (Don't Repeat Yourself) - Avoid code duplication</li> </ul> <p>Common Mistakes</p> <ul> <li>Overusing inheritance</li> <li>Breaking encapsulation</li> <li>Not using interfaces effectively</li> <li>Creating god classes (classes that do too much)</li> </ul>"},{"location":"java/oops/#quick-comparison","title":"Quick Comparison","text":"Concept Abstract Class Interface Methods Can have abstract and concrete All methods abstract (Java 7) Variables Can have any type Only static final Multiple No multiple inheritance Can implement multiple Constructor Can have constructor Cannot have constructor Access Modifiers Any access modifier Public by default"},{"location":"java/oops/#summary","title":"Summary","text":"<p>OOP in Java is built on four main principles:</p> <ol> <li>Encapsulation - Bundle data and methods, hide implementation</li> <li>Inheritance - Reuse code through parent-child relationships</li> <li>Polymorphism - Objects behave differently in different contexts</li> <li>Abstraction - Hide complexity, show only essentials</li> </ol>"},{"location":"java/oops/#next-topics","title":"Next Topics","text":"<p>Continue learning about: - Exception Handling in Java - Collections Framework - Multithreading - Design Patterns</p>"},{"location":"kafka/","title":"Apache Kafka","text":"<p>Learn about Apache Kafka, a distributed event streaming platform used for building real-time data pipelines and streaming applications.</p>"},{"location":"kafka/#what-is-apache-kafka","title":"What is Apache Kafka?","text":"<p>Apache Kafka is a distributed streaming platform that allows you to:</p> <ul> <li>Publish and subscribe to streams of records</li> <li>Store streams of records in a fault-tolerant way</li> <li>Process streams of records as they occur</li> </ul>"},{"location":"kafka/#core-concepts","title":"Core Concepts","text":""},{"location":"kafka/#1-topics","title":"1. Topics","text":"<p>A category or feed name to which records are published.</p> Text Only<pre><code>Topic: user-events\n\u251c\u2500\u2500 Partition 0: [msg1, msg2, msg3]\n\u251c\u2500\u2500 Partition 1: [msg4, msg5, msg6]\n\u2514\u2500\u2500 Partition 2: [msg7, msg8, msg9]\n</code></pre>"},{"location":"kafka/#2-partitions","title":"2. Partitions","text":"<p>Topics are split into partitions for parallelism and scalability.</p>"},{"location":"kafka/#3-producers","title":"3. Producers","text":"<p>Applications that publish (write) data to topics.</p> Java<pre><code>@Service\npublic class KafkaProducerService {\n\n    @Autowired\n    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;\n\n    public void sendMessage(String topic, String message) {\n        kafkaTemplate.send(topic, message);\n    }\n\n    public void sendWithKey(String topic, String key, String message) {\n        kafkaTemplate.send(topic, key, message);\n    }\n}\n</code></pre>"},{"location":"kafka/#4-consumers","title":"4. Consumers","text":"<p>Applications that subscribe to (read) data from topics.</p> Java<pre><code>@Service\npublic class KafkaConsumerService {\n\n    @KafkaListener(topics = \"user-events\", groupId = \"user-service\")\n    public void consume(String message) {\n        System.out.println(\"Received message: \" + message);\n        // Process message\n    }\n\n    @KafkaListener(topics = \"order-events\", groupId = \"order-service\")\n    public void consumeOrder(ConsumerRecord&lt;String, String&gt; record) {\n        System.out.println(\"Key: \" + record.key());\n        System.out.println(\"Value: \" + record.value());\n        System.out.println(\"Partition: \" + record.partition());\n        System.out.println(\"Offset: \" + record.offset());\n    }\n}\n</code></pre>"},{"location":"kafka/#5-consumer-groups","title":"5. Consumer Groups","text":"<p>Group of consumers that cooperate to consume data from topics.</p> Text Only<pre><code>Topic: orders (3 partitions)\n\nConsumer Group: order-processors\n\u251c\u2500\u2500 Consumer 1 \u2192 Partition 0\n\u251c\u2500\u2500 Consumer 2 \u2192 Partition 1\n\u2514\u2500\u2500 Consumer 3 \u2192 Partition 2\n</code></pre>"},{"location":"kafka/#6-brokers","title":"6. Brokers","text":"<p>Kafka servers that store data and serve clients.</p>"},{"location":"kafka/#7-zookeeper","title":"7. ZooKeeper","text":"<p>Manages and coordinates Kafka brokers (being replaced by KRaft).</p>"},{"location":"kafka/#kafka-architecture","title":"Kafka Architecture","text":"<pre><code>graph TD\n    P1[Producer 1] --&gt; B1[Broker 1]\n    P2[Producer 2] --&gt; B2[Broker 2]\n    P3[Producer 3] --&gt; B3[Broker 3]\n\n    B1 --&gt; T[Topic: Partitions]\n    B2 --&gt; T\n    B3 --&gt; T\n\n    T --&gt; C1[Consumer Group 1]\n    T --&gt; C2[Consumer Group 2]\n\n    C1 --&gt; CG1[Consumer 1]\n    C1 --&gt; CG2[Consumer 2]</code></pre>"},{"location":"kafka/#spring-boot-kafka-configuration","title":"Spring Boot Kafka Configuration","text":""},{"location":"kafka/#dependencies","title":"Dependencies","text":"XML<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"kafka/#applicationproperties","title":"application.properties","text":"Properties<pre><code># Kafka Producer Configuration\nspring.kafka.bootstrap-servers=localhost:9092\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.acks=all\nspring.kafka.producer.retries=3\n\n# Kafka Consumer Configuration\nspring.kafka.consumer.bootstrap-servers=localhost:9092\nspring.kafka.consumer.group-id=my-consumer-group\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.auto-offset-reset=earliest\nspring.kafka.consumer.enable-auto-commit=true\n</code></pre>"},{"location":"kafka/#producer-example","title":"Producer Example","text":""},{"location":"kafka/#simple-producer","title":"Simple Producer","text":"Java<pre><code>@RestController\n@RequestMapping(\"/api/kafka\")\npublic class KafkaController {\n\n    @Autowired\n    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;\n\n    @PostMapping(\"/publish\")\n    public ResponseEntity&lt;String&gt; publishMessage(\n            @RequestParam String topic,\n            @RequestParam String message) {\n\n        kafkaTemplate.send(topic, message);\n        return ResponseEntity.ok(\"Message published successfully\");\n    }\n}\n</code></pre>"},{"location":"kafka/#producer-with-callback","title":"Producer with Callback","text":"Java<pre><code>@Service\npublic class KafkaProducerService {\n\n    @Autowired\n    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;\n\n    private static final Logger logger = LoggerFactory.getLogger(KafkaProducerService.class);\n\n    public void sendMessageWithCallback(String topic, String message) {\n        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future =\n            kafkaTemplate.send(topic, message);\n\n        future.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() {\n            @Override\n            public void onSuccess(SendResult&lt;String, String&gt; result) {\n                logger.info(\"Message sent successfully: \" + message);\n                logger.info(\"Offset: \" + result.getRecordMetadata().offset());\n                logger.info(\"Partition: \" + result.getRecordMetadata().partition());\n            }\n\n            @Override\n            public void onFailure(Throwable ex) {\n                logger.error(\"Failed to send message: \" + message, ex);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"kafka/#producer-with-custom-object","title":"Producer with Custom Object","text":"Java<pre><code>// Domain class\npublic class Order {\n    private String orderId;\n    private String customerId;\n    private double amount;\n    private LocalDateTime orderDate;\n\n    // Constructors, getters, setters\n}\n\n// Producer configuration\n@Configuration\npublic class KafkaProducerConfig {\n\n    @Bean\n    public ProducerFactory&lt;String, Order&gt; orderProducerFactory() {\n        Map&lt;String, Object&gt; config = new HashMap&lt;&gt;();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);\n        return new DefaultKafkaProducerFactory&lt;&gt;(config);\n    }\n\n    @Bean\n    public KafkaTemplate&lt;String, Order&gt; orderKafkaTemplate() {\n        return new KafkaTemplate&lt;&gt;(orderProducerFactory());\n    }\n}\n\n// Producer service\n@Service\npublic class OrderProducerService {\n\n    @Autowired\n    private KafkaTemplate&lt;String, Order&gt; kafkaTemplate;\n\n    public void sendOrder(Order order) {\n        kafkaTemplate.send(\"order-topic\", order.getOrderId(), order);\n    }\n}\n</code></pre>"},{"location":"kafka/#consumer-example","title":"Consumer Example","text":""},{"location":"kafka/#simple-consumer","title":"Simple Consumer","text":"Java<pre><code>@Service\npublic class KafkaConsumerService {\n\n    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerService.class);\n\n    @KafkaListener(topics = \"my-topic\", groupId = \"my-group\")\n    public void consume(String message) {\n        logger.info(\"Consumed message: \" + message);\n    }\n}\n</code></pre>"},{"location":"kafka/#consumer-with-error-handling","title":"Consumer with Error Handling","text":"Java<pre><code>@Service\npublic class KafkaConsumerService {\n\n    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumerService.class);\n\n    @KafkaListener(topics = \"order-topic\", groupId = \"order-group\")\n    public void consumeOrder(String order) {\n        try {\n            // Process order\n            processOrder(order);\n        } catch (Exception e) {\n            logger.error(\"Error processing order: \" + order, e);\n            // Send to dead letter queue\n            sendToDeadLetterQueue(order);\n        }\n    }\n\n    private void processOrder(String order) {\n        // Business logic\n    }\n\n    private void sendToDeadLetterQueue(String order) {\n        // Send failed message to DLQ\n    }\n}\n</code></pre>"},{"location":"kafka/#consumer-with-json-deserialization","title":"Consumer with JSON Deserialization","text":"Java<pre><code>@Configuration\npublic class KafkaConsumerConfig {\n\n    @Bean\n    public ConsumerFactory&lt;String, Order&gt; orderConsumerFactory() {\n        Map&lt;String, Object&gt; config = new HashMap&lt;&gt;();\n        config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        config.put(ConsumerConfig.GROUP_ID_CONFIG, \"order-group\");\n        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);\n        config.put(JsonDeserializer.TRUSTED_PACKAGES, \"*\");\n        config.put(JsonDeserializer.VALUE_DEFAULT_TYPE, Order.class);\n        return new DefaultKafkaConsumerFactory&lt;&gt;(config);\n    }\n\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory&lt;String, Order&gt; orderKafkaListenerFactory() {\n        ConcurrentKafkaListenerContainerFactory&lt;String, Order&gt; factory =\n            new ConcurrentKafkaListenerContainerFactory&lt;&gt;();\n        factory.setConsumerFactory(orderConsumerFactory());\n        return factory;\n    }\n}\n\n@Service\npublic class OrderConsumerService {\n\n    @KafkaListener(\n        topics = \"order-topic\",\n        groupId = \"order-group\",\n        containerFactory = \"orderKafkaListenerFactory\"\n    )\n    public void consumeOrder(Order order) {\n        System.out.println(\"Received order: \" + order.getOrderId());\n        // Process order\n    }\n}\n</code></pre>"},{"location":"kafka/#kafka-streams","title":"Kafka Streams","text":"<p>Process data in real-time.</p> Java<pre><code>@Configuration\n@EnableKafkaStreams\npublic class KafkaStreamsConfig {\n\n    @Bean\n    public KStream&lt;String, String&gt; kStream(StreamsBuilder builder) {\n        KStream&lt;String, String&gt; stream = builder.stream(\"input-topic\");\n\n        stream\n            .filter((key, value) -&gt; value.length() &gt; 5)\n            .mapValues(value -&gt; value.toUpperCase())\n            .to(\"output-topic\");\n\n        return stream;\n    }\n}\n</code></pre>"},{"location":"kafka/#key-features","title":"Key Features","text":""},{"location":"kafka/#1-high-throughput","title":"1. High Throughput","text":"<p>Handle millions of messages per second.</p>"},{"location":"kafka/#2-scalability","title":"2. Scalability","text":"<p>Scale horizontally by adding brokers and partitions.</p>"},{"location":"kafka/#3-durability","title":"3. Durability","text":"<p>Data is persisted to disk and replicated.</p>"},{"location":"kafka/#4-fault-tolerance","title":"4. Fault Tolerance","text":"<p>Replication ensures data availability.</p> Properties<pre><code># Replication factor\nnum.replica.fetchers=3\nmin.insync.replicas=2\n</code></pre>"},{"location":"kafka/#5-real-time-processing","title":"5. Real-time Processing","text":"<p>Process data as it arrives.</p>"},{"location":"kafka/#use-cases","title":"Use Cases","text":"Use Case Description Messaging Replace traditional message queues Activity Tracking Track user actions on websites Metrics Collect and aggregate metrics Log Aggregation Centralize logs from multiple services Stream Processing Real-time data processing Event Sourcing Store state changes as events Commit Log Distributed commit log for microservices"},{"location":"kafka/#best-practices","title":"Best Practices","text":"<p>Kafka Best Practices</p> <ol> <li>Choose partition count carefully - Based on throughput needs</li> <li>Use appropriate replication factor - At least 3 for production</li> <li>Monitor lag - Track consumer lag</li> <li>Use consumer groups - For parallel processing</li> <li>Handle errors gracefully - Implement retry and DLQ</li> <li>Enable compression - Reduce network bandwidth</li> <li>Set retention policies - Based on storage and needs</li> <li>Use schemas - Avro/Protobuf for data validation</li> <li>Monitor performance - Use Kafka metrics</li> <li>Secure your cluster - Enable authentication and encryption</li> </ol>"},{"location":"kafka/#common-patterns","title":"Common Patterns","text":""},{"location":"kafka/#event-sourcing","title":"Event Sourcing","text":"Java<pre><code>@Service\npublic class OrderEventSourcing {\n\n    @Autowired\n    private KafkaTemplate&lt;String, OrderEvent&gt; kafkaTemplate;\n\n    public void createOrder(Order order) {\n        OrderEvent event = new OrderEvent(\"ORDER_CREATED\", order);\n        kafkaTemplate.send(\"order-events\", event);\n    }\n\n    public void updateOrder(Order order) {\n        OrderEvent event = new OrderEvent(\"ORDER_UPDATED\", order);\n        kafkaTemplate.send(\"order-events\", event);\n    }\n\n    @KafkaListener(topics = \"order-events\", groupId = \"order-processor\")\n    public void processOrderEvent(OrderEvent event) {\n        switch (event.getEventType()) {\n            case \"ORDER_CREATED\":\n                handleOrderCreated(event.getOrder());\n                break;\n            case \"ORDER_UPDATED\":\n                handleOrderUpdated(event.getOrder());\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"kafka/#cqrs-command-query-responsibility-segregation","title":"CQRS (Command Query Responsibility Segregation)","text":"Java<pre><code>// Command side - writes to Kafka\n@Service\npublic class OrderCommandService {\n    @Autowired\n    private KafkaTemplate&lt;String, OrderCommand&gt; kafkaTemplate;\n\n    public void createOrder(OrderCommand command) {\n        kafkaTemplate.send(\"order-commands\", command);\n    }\n}\n\n// Query side - reads from Kafka and updates read model\n@Service\npublic class OrderQueryService {\n    @Autowired\n    private OrderReadRepository readRepository;\n\n    @KafkaListener(topics = \"order-events\", groupId = \"query-side\")\n    public void updateReadModel(OrderEvent event) {\n        OrderReadModel model = buildReadModel(event);\n        readRepository.save(model);\n    }\n}\n</code></pre>"},{"location":"kafka/#monitoring","title":"Monitoring","text":"Properties<pre><code># Enable JMX metrics\njmx.port=9999\n\n# Consumer lag monitoring\nconsumer.lag.threshold=1000\n</code></pre>"},{"location":"kafka/#summary","title":"Summary","text":"<p>Apache Kafka provides:</p> <ul> <li>\u2705 High throughput and low latency</li> <li>\u2705 Horizontal scalability</li> <li>\u2705 Fault tolerance and durability</li> <li>\u2705 Real-time stream processing</li> <li>\u2705 Decoupling of services</li> <li>\u2705 Event-driven architecture support</li> </ul>"},{"location":"kafka/#next-topics","title":"Next Topics","text":"<ul> <li>Kafka Connect</li> <li>Schema Registry</li> <li>ksqlDB</li> <li>Kafka Security (SSL, SASL)</li> <li>Kafka monitoring and operations</li> <li>Advanced stream processing</li> </ul>"},{"location":"microservices/","title":"Microservices","text":"<p>Learn about microservices architecture and how to build scalable, distributed applications.</p>"},{"location":"microservices/#what-are-microservices","title":"What are Microservices?","text":"<p>Microservices is an architectural style that structures an application as a collection of small, autonomous services that are:</p> <ul> <li>Independently deployable</li> <li>Loosely coupled</li> <li>Organized around business capabilities</li> <li>Owned by small teams</li> </ul>"},{"location":"microservices/#microservices-vs-monolithic","title":"Microservices vs Monolithic","text":"Aspect Monolithic Microservices Architecture Single unit Multiple services Deployment All together Independent Scaling Scale entire app Scale individual services Technology Single stack Polyglot Development One team Multiple teams Complexity Lower initially Higher"},{"location":"microservices/#key-characteristics","title":"Key Characteristics","text":""},{"location":"microservices/#1-independent-deployment","title":"1. Independent Deployment","text":"<p>Each microservice can be deployed independently without affecting others.</p>"},{"location":"microservices/#2-decentralized-data-management","title":"2. Decentralized Data Management","text":"<p>Each service owns its own database.</p>"},{"location":"microservices/#3-api-gateway","title":"3. API Gateway","text":"<p>Single entry point for all clients.</p> Text Only<pre><code>Client \u2192 API Gateway \u2192 Service A\n                     \u2192 Service B\n                     \u2192 Service C\n</code></pre>"},{"location":"microservices/#4-service-discovery","title":"4. Service Discovery","text":"<p>Services can find each other dynamically.</p>"},{"location":"microservices/#5-load-balancing","title":"5. Load Balancing","text":"<p>Distribute traffic across service instances.</p>"},{"location":"microservices/#common-patterns","title":"Common Patterns","text":""},{"location":"microservices/#api-gateway-pattern","title":"API Gateway Pattern","text":"Java<pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class ApiGateway {\n    @Autowired\n    private UserServiceClient userService;\n\n    @Autowired\n    private OrderServiceClient orderService;\n\n    @GetMapping(\"/user-orders/{userId}\")\n    public UserOrdersDTO getUserWithOrders(@PathVariable Long userId) {\n        User user = userService.getUser(userId);\n        List&lt;Order&gt; orders = orderService.getUserOrders(userId);\n        return new UserOrdersDTO(user, orders);\n    }\n}\n</code></pre>"},{"location":"microservices/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<p>Prevents cascading failures.</p> Java<pre><code>@Service\npublic class UserService {\n    @CircuitBreaker(name = \"userService\", fallbackMethod = \"fallbackGetUser\")\n    public User getUser(Long id) {\n        return restTemplate.getForObject(\n            \"http://user-service/api/users/\" + id,\n            User.class\n        );\n    }\n\n    public User fallbackGetUser(Long id, Exception ex) {\n        return new User(id, \"Fallback User\", \"fallback@example.com\");\n    }\n}\n</code></pre>"},{"location":"microservices/#service-registry-pattern","title":"Service Registry Pattern","text":"<p>Services register themselves for discovery.</p> Java<pre><code>@EnableEurekaClient\n@SpringBootApplication\npublic class UserServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(UserServiceApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"microservices/#technologies-tools","title":"Technologies &amp; Tools","text":"Category Tools Service Discovery Eureka, Consul, Zookeeper API Gateway Spring Cloud Gateway, Netflix Zuul Load Balancing Ribbon, Spring Cloud LoadBalancer Circuit Breaker Resilience4j, Hystrix Configuration Spring Cloud Config, Consul Monitoring Prometheus, Grafana, ELK Stack Tracing Zipkin, Jaeger Messaging RabbitMQ, Apache Kafka Containers Docker, Kubernetes"},{"location":"microservices/#communication","title":"Communication","text":""},{"location":"microservices/#synchronous-rest","title":"Synchronous (REST)","text":"Java<pre><code>@FeignClient(name = \"user-service\")\npublic interface UserClient {\n    @GetMapping(\"/api/users/{id}\")\n    User getUser(@PathVariable Long id);\n}\n</code></pre>"},{"location":"microservices/#asynchronous-messaging","title":"Asynchronous (Messaging)","text":"Java<pre><code>@Service\npublic class OrderService {\n    @Autowired\n    private KafkaTemplate&lt;String, Order&gt; kafkaTemplate;\n\n    public void createOrder(Order order) {\n        // Save order\n        orderRepository.save(order);\n\n        // Publish event\n        kafkaTemplate.send(\"order-created\", order);\n    }\n}\n\n@Service\npublic class InventoryService {\n    @KafkaListener(topics = \"order-created\")\n    public void handleOrderCreated(Order order) {\n        // Update inventory\n        inventoryService.updateStock(order);\n    }\n}\n</code></pre>"},{"location":"microservices/#best-practices","title":"Best Practices","text":"<p>Microservices Best Practices</p> <ol> <li>Single Responsibility - One service, one business capability</li> <li>Decentralize Data - Each service owns its database</li> <li>API Versioning - Version your APIs</li> <li>Health Checks - Implement health endpoints</li> <li>Logging - Centralized logging</li> <li>Monitoring - Track metrics and traces</li> <li>Security - Use OAuth2/JWT</li> <li>CI/CD - Automate deployments</li> <li>Testing - Unit, integration, and contract tests</li> <li>Documentation - Document APIs (Swagger/OpenAPI)</li> </ol>"},{"location":"microservices/#challenges","title":"Challenges","text":"Challenge Solution Distributed Data SAGA pattern, Event Sourcing Network Issues Circuit breaker, Retry logic Service Discovery Service registry (Eureka, Consul) Monitoring Distributed tracing (Zipkin, Jaeger) Debugging Centralized logging (ELK Stack) Testing Contract testing (Pact)"},{"location":"microservices/#example-architecture","title":"Example Architecture","text":"<pre><code>graph TD\n    A[Client] --&gt; B[API Gateway]\n    B --&gt; C[Auth Service]\n    B --&gt; D[User Service]\n    B --&gt; E[Order Service]\n    B --&gt; F[Product Service]\n\n    D --&gt; G[(User DB)]\n    E --&gt; H[(Order DB)]\n    F --&gt; I[(Product DB)]\n\n    E -.Message Queue.-&gt; J[Notification Service]\n    E -.Message Queue.-&gt; K[Inventory Service]</code></pre>"},{"location":"microservices/#summary","title":"Summary","text":"<p>Microservices provide:</p> <ul> <li>\u2705 Independent deployment and scaling</li> <li>\u2705 Technology flexibility</li> <li>\u2705 Fault isolation</li> <li>\u2705 Team autonomy</li> <li>\u26a0\ufe0f Increased complexity</li> <li>\u26a0\ufe0f Distributed system challenges</li> </ul>"},{"location":"microservices/#next-topics","title":"Next Topics","text":"<ul> <li>Service mesh (Istio, Linkerd)</li> <li>Event-driven architecture</li> <li>CQRS and Event Sourcing</li> <li>Kubernetes orchestration</li> <li>DevOps practices for microservices</li> </ul>"},{"location":"springboot/basics/","title":"Spring Boot Basics","text":"<p>Learn the fundamentals of Spring Boot framework for building Java applications.</p>"},{"location":"springboot/basics/#what-is-spring-boot","title":"What is Spring Boot?","text":"<p>Spring Boot is an opinionated framework built on top of the Spring Framework that makes it easy to create stand-alone, production-grade Spring-based applications with minimal configuration.</p>"},{"location":"springboot/basics/#why-spring-boot","title":"Why Spring Boot?","text":"Feature Benefit Auto-configuration Automatic configuration based on classpath Standalone Embedded servers (Tomcat, Jetty) Production-ready Metrics, health checks out of the box No XML Convention over configuration Quick Start Minimal setup required"},{"location":"springboot/basics/#key-features","title":"Key Features","text":""},{"location":"springboot/basics/#1-auto-configuration","title":"1. Auto-Configuration","text":"<p>Spring Boot automatically configures your application based on the dependencies you have added.</p> Java<pre><code>@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#2-starter-dependencies","title":"2. Starter Dependencies","text":"<p>Simplified dependency management through starters.</p> XML<pre><code>&lt;!-- pom.xml --&gt;\n&lt;dependencies&gt;\n    &lt;!-- Web applications --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- JPA and Database --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Security --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"springboot/basics/#3-embedded-server","title":"3. Embedded Server","text":"<p>No need to deploy WAR files - application runs standalone.</p> Java<pre><code>// Application runs on embedded Tomcat by default\n// Access at http://localhost:8080\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#core-annotations","title":"Core Annotations","text":""},{"location":"springboot/basics/#springbootapplication","title":"@SpringBootApplication","text":"<p>Combines three annotations: - <code>@Configuration</code> - Marks class as source of bean definitions - <code>@EnableAutoConfiguration</code> - Enables auto-configuration - <code>@ComponentScan</code> - Scans for components in current package and sub-packages</p> Java<pre><code>@SpringBootApplication\npublic class MyApp {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApp.class, args);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#restcontroller","title":"@RestController","text":"<p>Creates RESTful web services.</p> Java<pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class UserController {\n\n    @GetMapping(\"/users\")\n    public List&lt;User&gt; getAllUsers() {\n        return userService.findAll();\n    }\n\n    @GetMapping(\"/users/{id}\")\n    public User getUserById(@PathVariable Long id) {\n        return userService.findById(id);\n    }\n\n    @PostMapping(\"/users\")\n    public User createUser(@RequestBody User user) {\n        return userService.save(user);\n    }\n\n    @PutMapping(\"/users/{id}\")\n    public User updateUser(@PathVariable Long id, @RequestBody User user) {\n        return userService.update(id, user);\n    }\n\n    @DeleteMapping(\"/users/{id}\")\n    public void deleteUser(@PathVariable Long id) {\n        userService.delete(id);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#service","title":"@Service","text":"<p>Marks service layer components.</p> Java<pre><code>@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    public List&lt;User&gt; findAll() {\n        return userRepository.findAll();\n    }\n\n    public User findById(Long id) {\n        return userRepository.findById(id)\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"User not found\"));\n    }\n\n    public User save(User user) {\n        return userRepository.save(user);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#repository","title":"@Repository","text":"<p>Marks data access layer components.</p> Java<pre><code>@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    // Custom query methods\n    List&lt;User&gt; findByLastName(String lastName);\n\n    User findByEmail(String email);\n\n    @Query(\"SELECT u FROM User u WHERE u.age &gt; :age\")\n    List&lt;User&gt; findUsersOlderThan(@Param(\"age\") int age);\n}\n</code></pre>"},{"location":"springboot/basics/#entity","title":"@Entity","text":"<p>Marks JPA entities.</p> Java<pre><code>@Entity\n@Table(name = \"users\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String firstName;\n\n    @Column(nullable = false)\n    private String lastName;\n\n    @Column(unique = true, nullable = false)\n    private String email;\n\n    private Integer age;\n\n    // Getters and setters\n}\n</code></pre>"},{"location":"springboot/basics/#configuration","title":"Configuration","text":""},{"location":"springboot/basics/#applicationproperties","title":"application.properties","text":"Properties<pre><code># Server configuration\nserver.port=8080\nserver.servlet.context-path=/api\n\n# Database configuration\nspring.datasource.url=jdbc:mysql://localhost:3306/mydb\nspring.datasource.username=root\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n# JPA configuration\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n\n# Logging\nlogging.level.root=INFO\nlogging.level.com.example=DEBUG\n</code></pre>"},{"location":"springboot/basics/#applicationyml","title":"application.yml","text":"YAML<pre><code>server:\n  port: 8080\n  servlet:\n    context-path: /api\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: password\n    driver-class-name: com.mysql.cj.jdbc.Driver\n\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.MySQL8Dialect\n\nlogging:\n  level:\n    root: INFO\n    com.example: DEBUG\n</code></pre>"},{"location":"springboot/basics/#project-structure","title":"Project Structure","text":"Text Only<pre><code>my-spring-boot-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 myapp/\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 MyAppApplication.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 UserController.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 UserService.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 UserRepository.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 User.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 UserDTO.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 exception/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 ResourceNotFoundException.java\n\u2502   \u2502   \u2502               \u2514\u2500\u2500 config/\n\u2502   \u2502   \u2502                   \u2514\u2500\u2500 AppConfig.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.properties\n\u2502   \u2502       \u251c\u2500\u2500 static/\n\u2502   \u2502       \u2514\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 example/\n\u2502                   \u2514\u2500\u2500 myapp/\n\u2502                       \u2514\u2500\u2500 MyAppApplicationTests.java\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"springboot/basics/#creating-a-rest-api","title":"Creating a REST API","text":"<p>Complete example of a REST API:</p> Java<pre><code>// Entity\n@Entity\n@Table(name = \"products\")\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String description;\n    private Double price;\n\n    // Constructors, getters, setters\n}\n\n// Repository\n@Repository\npublic interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {\n    List&lt;Product&gt; findByNameContaining(String name);\n    List&lt;Product&gt; findByPriceBetween(Double min, Double max);\n}\n\n// Service\n@Service\npublic class ProductService {\n    @Autowired\n    private ProductRepository repository;\n\n    public List&lt;Product&gt; getAllProducts() {\n        return repository.findAll();\n    }\n\n    public Product getProductById(Long id) {\n        return repository.findById(id)\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"Product not found\"));\n    }\n\n    public Product createProduct(Product product) {\n        return repository.save(product);\n    }\n\n    public Product updateProduct(Long id, Product productDetails) {\n        Product product = getProductById(id);\n        product.setName(productDetails.getName());\n        product.setDescription(productDetails.getDescription());\n        product.setPrice(productDetails.getPrice());\n        return repository.save(product);\n    }\n\n    public void deleteProduct(Long id) {\n        Product product = getProductById(id);\n        repository.delete(product);\n    }\n}\n\n// Controller\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n    @Autowired\n    private ProductService service;\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;Product&gt;&gt; getAllProducts() {\n        return ResponseEntity.ok(service.getAllProducts());\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;Product&gt; getProductById(@PathVariable Long id) {\n        return ResponseEntity.ok(service.getProductById(id));\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;Product&gt; createProduct(@RequestBody Product product) {\n        return ResponseEntity.status(HttpStatus.CREATED)\n            .body(service.createProduct(product));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;Product&gt; updateProduct(\n            @PathVariable Long id,\n            @RequestBody Product product) {\n        return ResponseEntity.ok(service.updateProduct(id, product));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable Long id) {\n        service.deleteProduct(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#exception-handling","title":"Exception Handling","text":"Java<pre><code>@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleResourceNotFound(\n            ResourceNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.NOT_FOUND.value(),\n            ex.getMessage(),\n            System.currentTimeMillis()\n        );\n        return new ResponseEntity&lt;&gt;(error, HttpStatus.NOT_FOUND);\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleGlobalException(Exception ex) {\n        ErrorResponse error = new ErrorResponse(\n            HttpStatus.INTERNAL_SERVER_ERROR.value(),\n            ex.getMessage(),\n            System.currentTimeMillis()\n        );\n        return new ResponseEntity&lt;&gt;(error, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n</code></pre>"},{"location":"springboot/basics/#best-practices","title":"Best Practices","text":"<p>Spring Boot Best Practices</p> <ol> <li>Use appropriate layers - Controller, Service, Repository</li> <li>Dependency Injection - Use constructor injection</li> <li>DTOs - Don't expose entities directly</li> <li>Exception Handling - Use @ControllerAdvice</li> <li>Validation - Use @Valid and Bean Validation</li> <li>Logging - Use SLF4J with Logback</li> <li>Profiles - Use profiles for different environments</li> <li>Testing - Write unit and integration tests</li> </ol>"},{"location":"springboot/basics/#common-starters","title":"Common Starters","text":"Starter Purpose <code>spring-boot-starter-web</code> Web applications and REST APIs <code>spring-boot-starter-data-jpa</code> JPA and Hibernate <code>spring-boot-starter-security</code> Spring Security <code>spring-boot-starter-test</code> Testing (JUnit, Mockito, etc.) <code>spring-boot-starter-actuator</code> Production monitoring <code>spring-boot-starter-validation</code> Bean Validation <code>spring-boot-starter-mail</code> Email support <code>spring-boot-starter-cache</code> Caching support"},{"location":"springboot/basics/#summary","title":"Summary","text":"<p>Spring Boot simplifies Java application development by providing:</p> <ul> <li>\u2705 Auto-configuration</li> <li>\u2705 Starter dependencies</li> <li>\u2705 Embedded servers</li> <li>\u2705 Production-ready features</li> <li>\u2705 Minimal configuration</li> <li>\u2705 Quick development setup</li> </ul>"},{"location":"springboot/basics/#next-steps","title":"Next Steps","text":"<p>Explore more advanced topics: - Spring Boot Security - Spring Data JPA advanced features - Microservices with Spring Boot - Spring Boot Actuator - Caching and Performance - Testing strategies</p>"},{"location":"sql/","title":"SQL (Structured Query Language)","text":"<p>Learn SQL for managing and querying relational databases.</p>"},{"location":"sql/#what-is-sql","title":"What is SQL?","text":"<p>SQL (Structured Query Language) is a standard language for storing, manipulating, and retrieving data in relational databases.</p>"},{"location":"sql/#sql-categories","title":"SQL Categories","text":""},{"location":"sql/#1-ddl-data-definition-language","title":"1. DDL (Data Definition Language)","text":"<p>Define database structure.</p> SQL<pre><code>-- CREATE: Create database objects\nCREATE DATABASE mydb;\n\nCREATE TABLE employees (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    hire_date DATE,\n    salary DECIMAL(10, 2)\n);\n\n-- ALTER: Modify structure\nALTER TABLE employees ADD COLUMN department VARCHAR(50);\nALTER TABLE employees MODIFY COLUMN salary DECIMAL(12, 2);\nALTER TABLE employees DROP COLUMN department;\n\n-- DROP: Delete objects\nDROP TABLE employees;\nDROP DATABASE mydb;\n\n-- TRUNCATE: Remove all data\nTRUNCATE TABLE employees;\n</code></pre>"},{"location":"sql/#2-dml-data-manipulation-language","title":"2. DML (Data Manipulation Language)","text":"<p>Manipulate data in tables.</p> SQL<pre><code>-- INSERT: Add new records\nINSERT INTO employees (first_name, last_name, email, hire_date, salary)\nVALUES ('John', 'Doe', 'john@example.com', '2024-01-15', 75000.00);\n\n-- Multiple records\nINSERT INTO employees (first_name, last_name, email, salary) VALUES\n('Jane', 'Smith', 'jane@example.com', 80000.00),\n('Bob', 'Johnson', 'bob@example.com', 72000.00),\n('Alice', 'Williams', 'alice@example.com', 85000.00);\n\n-- UPDATE: Modify existing records\nUPDATE employees\nSET salary = 80000.00\nWHERE id = 1;\n\nUPDATE employees\nSET salary = salary * 1.10\nWHERE hire_date &lt; '2023-01-01';\n\n-- DELETE: Remove records\nDELETE FROM employees WHERE id = 1;\nDELETE FROM employees WHERE salary &lt; 50000;\n</code></pre>"},{"location":"sql/#3-dql-data-query-language","title":"3. DQL (Data Query Language)","text":"<p>Query and retrieve data.</p> SQL<pre><code>-- SELECT: Basic query\nSELECT * FROM employees;\n\nSELECT first_name, last_name, salary\nFROM employees;\n\n-- WHERE: Filter results\nSELECT * FROM employees\nWHERE salary &gt; 75000;\n\nSELECT * FROM employees\nWHERE hire_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n-- ORDER BY: Sort results\nSELECT * FROM employees\nORDER BY salary DESC;\n\nSELECT * FROM employees\nORDER BY last_name ASC, first_name ASC;\n\n-- LIMIT: Restrict number of results\nSELECT * FROM employees\nORDER BY salary DESC\nLIMIT 10;\n\n-- DISTINCT: Unique values\nSELECT DISTINCT department FROM employees;\n</code></pre>"},{"location":"sql/#4-dcl-data-control-language","title":"4. DCL (Data Control Language)","text":"<p>Control access to data.</p> SQL<pre><code>-- GRANT: Give permissions\nGRANT SELECT, INSERT ON mydb.employees TO 'user'@'localhost';\n\n-- REVOKE: Remove permissions\nREVOKE INSERT ON mydb.employees FROM 'user'@'localhost';\n</code></pre>"},{"location":"sql/#sql-operators","title":"SQL Operators","text":""},{"location":"sql/#comparison-operators","title":"Comparison Operators","text":"SQL<pre><code>SELECT * FROM employees WHERE salary = 75000;    -- Equal\nSELECT * FROM employees WHERE salary != 75000;   -- Not equal\nSELECT * FROM employees WHERE salary &gt; 75000;    -- Greater than\nSELECT * FROM employees WHERE salary &gt;= 75000;   -- Greater or equal\nSELECT * FROM employees WHERE salary &lt; 75000;    -- Less than\nSELECT * FROM employees WHERE salary &lt;= 75000;   -- Less or equal\nSELECT * FROM employees WHERE salary BETWEEN 70000 AND 80000;\nSELECT * FROM employees WHERE department IN ('IT', 'Sales', 'HR');\nSELECT * FROM employees WHERE email LIKE '%@example.com';\nSELECT * FROM employees WHERE department IS NULL;\n</code></pre>"},{"location":"sql/#logical-operators","title":"Logical Operators","text":"SQL<pre><code>-- AND\nSELECT * FROM employees\nWHERE salary &gt; 70000 AND department = 'IT';\n\n-- OR\nSELECT * FROM employees\nWHERE department = 'IT' OR department = 'Sales';\n\n-- NOT\nSELECT * FROM employees\nWHERE NOT department = 'HR';\n</code></pre>"},{"location":"sql/#aggregate-functions","title":"Aggregate Functions","text":"SQL<pre><code>-- COUNT: Count rows\nSELECT COUNT(*) FROM employees;\nSELECT COUNT(DISTINCT department) FROM employees;\n\n-- SUM: Calculate total\nSELECT SUM(salary) FROM employees;\nSELECT SUM(salary) FROM employees WHERE department = 'IT';\n\n-- AVG: Calculate average\nSELECT AVG(salary) FROM employees;\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department;\n\n-- MAX and MIN\nSELECT MAX(salary) FROM employees;\nSELECT MIN(salary) FROM employees;\nSELECT department, MAX(salary), MIN(salary)\nFROM employees\nGROUP BY department;\n</code></pre>"},{"location":"sql/#group-by-and-having","title":"GROUP BY and HAVING","text":"SQL<pre><code>-- GROUP BY: Group rows\nSELECT department, COUNT(*) as employee_count\nFROM employees\nGROUP BY department;\n\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department\nORDER BY avg_salary DESC;\n\n-- HAVING: Filter grouped results\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department\nHAVING AVG(salary) &gt; 75000;\n</code></pre>"},{"location":"sql/#joins","title":"Joins","text":""},{"location":"sql/#inner-join","title":"INNER JOIN","text":"<p>Returns matching rows from both tables.</p> SQL<pre><code>SELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.id;\n</code></pre>"},{"location":"sql/#left-join","title":"LEFT JOIN","text":"<p>Returns all rows from left table and matching rows from right.</p> SQL<pre><code>SELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.id;\n</code></pre>"},{"location":"sql/#right-join","title":"RIGHT JOIN","text":"<p>Returns all rows from right table and matching rows from left.</p> SQL<pre><code>SELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nRIGHT JOIN departments d ON e.department_id = d.id;\n</code></pre>"},{"location":"sql/#full-outer-join","title":"FULL OUTER JOIN","text":"<p>Returns all rows when there's a match in either table.</p> SQL<pre><code>SELECT e.first_name, e.last_name, d.department_name\nFROM employees e\nFULL OUTER JOIN departments d ON e.department_id = d.id;\n</code></pre>"},{"location":"sql/#cross-join","title":"CROSS JOIN","text":"<p>Returns Cartesian product of both tables.</p> SQL<pre><code>SELECT e.first_name, d.department_name\nFROM employees e\nCROSS JOIN departments d;\n</code></pre>"},{"location":"sql/#subqueries","title":"Subqueries","text":"SQL<pre><code>-- Subquery in WHERE clause\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary &gt; (SELECT AVG(salary) FROM employees);\n\n-- Subquery in FROM clause\nSELECT dept, avg_sal\nFROM (\n    SELECT department as dept, AVG(salary) as avg_sal\n    FROM employees\n    GROUP BY department\n) AS department_avg\nWHERE avg_sal &gt; 75000;\n\n-- Subquery with IN\nSELECT first_name, last_name\nFROM employees\nWHERE department_id IN (\n    SELECT id FROM departments WHERE location = 'New York'\n);\n</code></pre>"},{"location":"sql/#indexes","title":"Indexes","text":"SQL<pre><code>-- CREATE INDEX: Speed up queries\nCREATE INDEX idx_email ON employees(email);\nCREATE INDEX idx_name ON employees(last_name, first_name);\n\n-- UNIQUE INDEX\nCREATE UNIQUE INDEX idx_email ON employees(email);\n\n-- DROP INDEX\nDROP INDEX idx_email ON employees;\n</code></pre>"},{"location":"sql/#constraints","title":"Constraints","text":"SQL<pre><code>CREATE TABLE employees (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    department_id INT,\n    salary DECIMAL(10, 2) CHECK (salary &gt; 0),\n    hire_date DATE DEFAULT CURRENT_DATE,\n\n    FOREIGN KEY (department_id) REFERENCES departments(id)\n        ON DELETE CASCADE\n        ON UPDATE CASCADE\n);\n</code></pre>"},{"location":"sql/#transactions","title":"Transactions","text":"SQL<pre><code>-- START TRANSACTION\nSTART TRANSACTION;\n\n-- Perform operations\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\n\n-- COMMIT: Save changes\nCOMMIT;\n\n-- ROLLBACK: Undo changes if error\nROLLBACK;\n</code></pre>"},{"location":"sql/#views","title":"Views","text":"SQL<pre><code>-- CREATE VIEW: Virtual table\nCREATE VIEW employee_details AS\nSELECT e.id, e.first_name, e.last_name, d.department_name, e.salary\nFROM employees e\nJOIN departments d ON e.department_id = d.id;\n\n-- Use view\nSELECT * FROM employee_details WHERE salary &gt; 75000;\n\n-- DROP VIEW\nDROP VIEW employee_details;\n</code></pre>"},{"location":"sql/#common-functions","title":"Common Functions","text":""},{"location":"sql/#string-functions","title":"String Functions","text":"SQL<pre><code>SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;\nSELECT UPPER(first_name) FROM employees;\nSELECT LOWER(email) FROM employees;\nSELECT LENGTH(first_name) FROM employees;\nSELECT SUBSTRING(email, 1, 10) FROM employees;\nSELECT TRIM(first_name) FROM employees;\n</code></pre>"},{"location":"sql/#date-functions","title":"Date Functions","text":"SQL<pre><code>SELECT NOW();                                    -- Current date and time\nSELECT CURDATE();                                -- Current date\nSELECT CURTIME();                                -- Current time\nSELECT DATE_FORMAT(hire_date, '%Y-%m-%d') FROM employees;\nSELECT DATEDIFF(CURDATE(), hire_date) AS days_employed FROM employees;\nSELECT DATE_ADD(hire_date, INTERVAL 1 YEAR) FROM employees;\n</code></pre>"},{"location":"sql/#numeric-functions","title":"Numeric Functions","text":"SQL<pre><code>SELECT ROUND(salary, 2) FROM employees;\nSELECT CEIL(salary) FROM employees;\nSELECT FLOOR(salary) FROM employees;\nSELECT ABS(salary) FROM employees;\nSELECT POWER(2, 3);  -- 8\n</code></pre>"},{"location":"sql/#best-practices","title":"Best Practices","text":"<p>SQL Best Practices</p> <ol> <li>Use indexes - For frequently queried columns</li> <li>**Avoid SELECT *** - Select only needed columns</li> <li>Use JOINs properly - Choose appropriate join type</li> <li>Parameterize queries - Prevent SQL injection</li> <li>Use transactions - For data consistency</li> <li>Normalize data - Reduce redundancy</li> <li>Use constraints - Ensure data integrity</li> <li>Add comments - Document complex queries</li> <li>Use aliases - Make queries readable</li> <li>Test on sample data - Before production</li> </ol>"},{"location":"sql/#performance-tips","title":"Performance Tips","text":"SQL<pre><code>-- Good: Use index\nSELECT * FROM employees WHERE id = 100;\n\n-- Bad: Function on indexed column\nSELECT * FROM employees WHERE YEAR(hire_date) = 2023;\n\n-- Good: Use range instead\nSELECT * FROM employees\nWHERE hire_date BETWEEN '2023-01-01' AND '2023-12-31';\n\n-- Use EXPLAIN to analyze queries\nEXPLAIN SELECT * FROM employees WHERE salary &gt; 75000;\n</code></pre>"},{"location":"sql/#common-patterns","title":"Common Patterns","text":""},{"location":"sql/#pagination","title":"Pagination","text":"SQL<pre><code>-- MySQL/PostgreSQL\nSELECT * FROM employees\nORDER BY id\nLIMIT 10 OFFSET 20;  -- Page 3 (rows 21-30)\n</code></pre>"},{"location":"sql/#ranking","title":"Ranking","text":"SQL<pre><code>SELECT\n    first_name,\n    salary,\n    RANK() OVER (ORDER BY salary DESC) as salary_rank\nFROM employees;\n</code></pre>"},{"location":"sql/#pivot-table","title":"Pivot Table","text":"SQL<pre><code>SELECT\n    department,\n    SUM(CASE WHEN YEAR(hire_date) = 2022 THEN 1 ELSE 0 END) as hired_2022,\n    SUM(CASE WHEN YEAR(hire_date) = 2023 THEN 1 ELSE 0 END) as hired_2023\nFROM employees\nGROUP BY department;\n</code></pre>"},{"location":"sql/#summary","title":"Summary","text":"<p>SQL is essential for:</p> <ul> <li>\u2705 Creating and managing databases</li> <li>\u2705 Querying and retrieving data</li> <li>\u2705 Data manipulation and updates</li> <li>\u2705 Data analysis and reporting</li> <li>\u2705 Ensuring data integrity</li> <li>\u2705 Performance optimization</li> </ul>"},{"location":"sql/#next-topics","title":"Next Topics","text":"<ul> <li>Advanced SQL (Window functions, CTEs)</li> <li>Database design and normalization</li> <li>SQL optimization and indexing</li> <li>Stored procedures and triggers</li> <li>NoSQL databases</li> </ul>"}]}